{"version":3,"sources":["components/Footer.module.css","TextReader/TextReader.js","components/Footer.js","App.js","serviceWorker.js","index.js","TextReader/TextReader.module.css"],"names":["module","exports","TextReader","compatibility","useRef","voices","useState","text","setText","rate","setRate","pitch","setPitch","isPaused","setIsPaused","isSpeak","setIsSpeak","utterance","SpeechSynthesisUtterance","voicesAvailable","speechSynthesis","getVoices","undefined","window","current","useEffect","injectVoices","voicesElement","innerHTML","map","voice","option","document","createElement","value","lang","textContent","name","default","setAttribute","voiceURI","outerHTML","join","Container","className","classes","content","contentWrap","title","Jumbotron","jumbotron","Form","action","method","FormText","info","FormGroup","formGroup","Input","type","id","inputText","onChange","e","target","Label","for","ref","Row","form","Col","md","rangeInput","min","max","step","buttonGroup","Button","disabled","color","button","onClick","selectedOption","options","selectedIndex","selectedVoice","filter","getAttribute","pop","speak","resume","pause","cancel","unsupported","Footer","footer","href","rel","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a9ec93f7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__sLWel\"};","import React, { useState, useEffect, useRef } from 'react';\r\nimport {\r\n    Container,\r\n    Row,\r\n    Jumbotron,\r\n    Button,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    FormText,\r\n    Col,\r\n} from 'reactstrap';\r\n\r\nimport classes from './TextReader.module.css';\r\n\r\nconst TextReader = () => {\r\n    const compatibility = useRef(true);\r\n    const voices = useRef(null);\r\n    const [text, setText] = useState('');\r\n    const [rate, setRate] = useState(1);\r\n    const [pitch, setPitch] = useState(1);\r\n\r\n    const [isPaused, setIsPaused] = useState(true);\r\n    const [isSpeak, setIsSpeak] = useState(true);\r\n\r\n    const utterance = new SpeechSynthesisUtterance();\r\n\r\n    const voicesAvailable = speechSynthesis.getVoices();\r\n\r\n    if (window.SpeechSynthesisUtterance === undefined && !voicesAvailable) {\r\n        compatibility.current = false;\r\n    } else {\r\n        compatibility.current = true;\r\n    }\r\n\r\n    useEffect(() => {\r\n        injectVoices(voices.current, speechSynthesis.getVoices());\r\n    }, [voices]);\r\n\r\n    useEffect(() => {\r\n        if (text === '') {\r\n            setIsSpeak(true);\r\n        }\r\n    }, [text]);\r\n\r\n    const injectVoices = (voicesElement, voices) => {\r\n        voicesElement.innerHTML = voices\r\n            .map((voice) => {\r\n                let option = document.createElement('option');\r\n\r\n                option.value = voice.lang;\r\n                option.textContent =\r\n                    voice.name + (voice.default ? ' (default)' : '');\r\n                option.setAttribute('data-voice-uri', voice.voiceURI);\r\n\r\n                return option;\r\n            })\r\n            .map((option) => {\r\n                return option.outerHTML;\r\n            })\r\n            .join('');\r\n    };\r\n\r\n    const handlerSpeak = () => {\r\n        let selectedOption =\r\n            voices.current.options[voices.current.selectedIndex];\r\n        let selectedVoice = speechSynthesis\r\n            .getVoices()\r\n            .filter(function (voice) {\r\n                return (\r\n                    voice.voiceURI ===\r\n                    selectedOption.getAttribute('data-voice-uri')\r\n                );\r\n            })\r\n            .pop();\r\n\r\n        utterance.text = text;\r\n        utterance.voice = selectedVoice;\r\n        utterance.lang = selectedVoice.lang;\r\n        utterance.rate = rate;\r\n        utterance.pitch = pitch;\r\n\r\n        speechSynthesis.speak(utterance);\r\n        setIsPaused(false);\r\n        setIsSpeak(false);\r\n    };\r\n\r\n    const handlerStop = () => {\r\n        speechSynthesis.cancel();\r\n        setIsPaused(false);\r\n        setIsSpeak(true);\r\n    };\r\n\r\n    const handlerPause = () => {\r\n        speechSynthesis.pause();\r\n        setIsPaused(true);\r\n    };\r\n\r\n    const handlerContinue = () => {\r\n        speechSynthesis.resume();\r\n        setIsPaused(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {compatibility.current ? (\r\n                <Container className={classes.content}>\r\n                    <div className={classes.contentWrap}>\r\n                        <h1 className={classes.title}>\r\n                            READ.OK | Speech Synthesis API\r\n                        </h1>\r\n                        <Jumbotron className={classes.jumbotron}>\r\n                            <Form action=\"\" method=\"get\">\r\n                                <FormText className={classes.info}>\r\n                                    Simple app for speech synthesis using\r\n                                    'React.js' and Speech Synthesis API <br />\r\n                                    In the text field, write the text that you\r\n                                    want to play with your computer's voice\r\n                                </FormText>\r\n                                <FormGroup className={classes.formGroup}>\r\n                                    <Input\r\n                                        type=\"textarea\"\r\n                                        id=\"text\"\r\n                                        className={classes.inputText}\r\n                                        value={text}\r\n                                        onChange={(e) =>\r\n                                            setText(e.target.value)\r\n                                        }\r\n                                    ></Input>\r\n                                </FormGroup>\r\n                                <FormGroup className={classes.formGroup}>\r\n                                    <Label for=\"voice\">Voice:</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        id=\"voice\"\r\n                                        ref={voices}\r\n                                    ></select>\r\n                                </FormGroup>\r\n                                <Row form className={classes.formGroup}>\r\n                                    <Col md={6}>\r\n                                        <FormGroup\r\n                                            className={classes.rangeInput}\r\n                                        >\r\n                                            <Label for=\"rate\">\r\n                                                Rate: <b>{rate}</b>\r\n                                            </Label>\r\n                                            <Input\r\n                                                type=\"range\"\r\n                                                id=\"rate\"\r\n                                                min=\"0.1\"\r\n                                                max=\"2\"\r\n                                                value={rate}\r\n                                                step=\"0.1\"\r\n                                                onChange={(e) =>\r\n                                                    setRate(e.target.value)\r\n                                                }\r\n                                            />\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                    <Col md={6}>\r\n                                        <FormGroup\r\n                                            className={classes.rangeInput}\r\n                                        >\r\n                                            <Label for=\"pitch\">\r\n                                                Pitch: <b>{pitch}</b>\r\n                                            </Label>\r\n                                            <Input\r\n                                                type=\"range\"\r\n                                                id=\"pitch\"\r\n                                                min=\"0.1\"\r\n                                                max=\"2\"\r\n                                                value={pitch}\r\n                                                step=\"0.1\"\r\n                                                onChange={(e) =>\r\n                                                    setPitch(e.target.value)\r\n                                                }\r\n                                            />\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormGroup className={classes.buttonGroup}>\r\n                                    {isSpeak ? (\r\n                                        <Button\r\n                                            disabled={!text ? true : false}\r\n                                            type=\"button\"\r\n                                            id=\"button-speak\"\r\n                                            color=\"success\"\r\n                                            className={classes.button}\r\n                                            onClick={handlerSpeak}\r\n                                        >\r\n                                            <i className=\"fas fa-play\"></i>{' '}\r\n                                            Speak\r\n                                        </Button>\r\n                                    ) : (\r\n                                        <Button\r\n                                            type=\"button\"\r\n                                            id=\"button-continue\"\r\n                                            color=\"info\"\r\n                                            className={classes.button}\r\n                                            onClick={handlerContinue}\r\n                                        >\r\n                                            <i className=\"fas fa-play\"></i>{' '}\r\n                                            Speak\r\n                                        </Button>\r\n                                    )}\r\n                                    <Button\r\n                                        disabled={!isPaused ? false : true}\r\n                                        type=\"button\"\r\n                                        id=\"button-pause\"\r\n                                        color=\"info\"\r\n                                        className={classes.button}\r\n                                        onClick={handlerPause}\r\n                                    >\r\n                                        <i className=\"fas fa-pause\"></i> Pause\r\n                                    </Button>\r\n\r\n                                    <Button\r\n                                        disabled={!text ? true : false}\r\n                                        type=\"button\"\r\n                                        id=\"button-stop\"\r\n                                        color=\"danger\"\r\n                                        className={classes.button}\r\n                                        onClick={handlerStop}\r\n                                    >\r\n                                        <i className=\"fas fa-stop\"></i> Stop\r\n                                    </Button>\r\n                                </FormGroup>\r\n                            </Form>\r\n                        </Jumbotron>\r\n                    </div>\r\n                </Container>\r\n            ) : (\r\n                <Container>\r\n                    <Row>\r\n                        <p className={classes.unsupported}>\r\n                            Speech Synthesis API Not Supported!\r\n                        </p>\r\n                    </Row>\r\n                </Container>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TextReader;\r\n","import React from 'react';\r\n\r\nimport classes from './Footer.module.css';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer className={classes.footer}>\r\n            <p>\r\n                © 2020 | READ.OK | Created by Dmitriy Zatulovskiy |{' '}\r\n                <a\r\n                    href=\"https://github.com/GrafSoul/react-speech-synthesis\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                >\r\n                    GitHub\r\n                </a>\r\n            </p>\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\n\nimport TextReader from './TextReader/TextReader';\nimport Footer from './components/Footer';\n\nconst App = () => {\n    return (\n        <>\n            <TextReader />\n            <Footer />\n        </>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"TextReader_content__13bKa\",\"contentWrap\":\"TextReader_contentWrap__3Oe6O\",\"jumbotron\":\"TextReader_jumbotron__1Qtbg\",\"title\":\"TextReader_title__Fw4j_\",\"info\":\"TextReader_info__M8cP8\",\"formGroup\":\"TextReader_formGroup__W58Pc\",\"inputText\":\"TextReader_inputText__-9i7C\",\"rangeInput\":\"TextReader_rangeInput__10w88\",\"button\":\"TextReader_button__1m_0l\",\"buttonGroup\":\"TextReader_buttonGroup__2e7cw\"};"],"sourceRoot":""}