{"version":3,"sources":["components/Header/Header.module.css","components/Footer/Footer.module.css","TextReader/TextReader.js","components/Header/Header.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js","TextReader/TextReader.module.css"],"names":["module","exports","TextReader","compatibility","useRef","voices","globalWords","spokenTextArray","textRef","panelRef","wordRef","wordIndexRef","useState","text","setText","rate","setRate","pitch","setPitch","volume","setVolume","isPaused","setIsPaused","isSpeak","setIsSpeak","isRecord","setIsRecord","isCopied","setIsCopied","utterance","SpeechSynthesisUtterance","voicesAvailable","speechSynthesis","getVoices","recognition","useEffect","current","webkitSpeechRecognition","continuous","interimResults","undefined","window","injectVoices","voicesElement","innerHTML","map","voice","option","document","createElement","value","lang","textContent","name","default","setAttribute","voiceURI","outerHTML","join","handlerStop","cancel","getWordAt","str","pos","String","Number","left","slice","search","right","drawTextInPanel","words_array","i","length","html","Container","className","classes","content","curtainBlocked","onClick","contentWrap","Jumbotron","jumbotron","Form","action","method","FormText","info","FormGroup","formGroup","ref","panelText","textareaBlocked","currentWord","Input","disabled","type","id","inputText","onChange","e","target","handlerText","Label","for","Row","form","Col","md","rangeInput","min","max","step","handlerRate","handlerPitch","handlerVolume","buttonGroup","Button","color","button","words","split","selectedOption","options","selectedIndex","selectedVoice","filter","getAttribute","pop","onboundary","word","charIndex","getElementById","style","backgroundColor","padding","display","margin","onend","speak","resume","pause","blink","stop","onresult","event","output","results","transcript","start","n","indexOf","substring","subject","encodeURI","body","location","href","navigator","clipboard","writeText","then","setTimeout","catch","err","console","log","width","unsupported","Header","header","headerWrap","Footer","footer","rel","App","Boolean","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.032e7b8f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1hOxH\",\"headerWrap\":\"Header_headerWrap__2k0N3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__qyoAG\"};","import React, { useState, useEffect, useRef } from 'react';\r\nimport {\r\n    Container,\r\n    Row,\r\n    Jumbotron,\r\n    Button,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    FormText,\r\n    Col,\r\n} from 'reactstrap';\r\n\r\nimport classes from './TextReader.module.css';\r\n\r\nconst TextReader = () => {\r\n    const compatibility = useRef(true);\r\n    const voices = useRef(null);\r\n    const globalWords = useRef([]);\r\n    const spokenTextArray = useRef([]);\r\n    const textRef = useRef(null);\r\n    const panelRef = useRef(null);\r\n    const wordRef = useRef(null);\r\n    const wordIndexRef = useRef(0);\r\n\r\n    const [text, setText] = useState('');\r\n    const [rate, setRate] = useState(1);\r\n    const [pitch, setPitch] = useState(1);\r\n    const [volume, setVolume] = useState(1);\r\n\r\n    const [isPaused, setIsPaused] = useState(true);\r\n    const [isSpeak, setIsSpeak] = useState(true);\r\n    const [isRecord, setIsRecord] = useState(false);\r\n    const [isCopied, setIsCopied] = useState(false);\r\n\r\n    const utterance = new SpeechSynthesisUtterance();\r\n    const voicesAvailable = speechSynthesis.getVoices();\r\n\r\n    // eslint-disable-next-line no-undef\r\n    const recognition = useRef(null);\r\n\r\n    useEffect(() => {\r\n        // eslint-disable-next-line no-undef\r\n        recognition.current = new webkitSpeechRecognition();\r\n        recognition.current.continuous = true;\r\n        recognition.current.interimResults = true;\r\n\r\n    },[recognition]);\r\n\r\n\r\n    if (window.SpeechSynthesisUtterance === undefined && !voicesAvailable) {\r\n        compatibility.current = false;\r\n    } else {\r\n        compatibility.current = true;\r\n    }\r\n\r\n    useEffect(() => {\r\n        injectVoices(voices.current, speechSynthesis.getVoices());\r\n    }, [voices]);\r\n\r\n    const injectVoices = (voicesElement, voices) => {\r\n        voicesElement.innerHTML = voices\r\n            .map((voice) => {\r\n                let option = document.createElement('option');\r\n\r\n                option.value = voice.lang;\r\n                option.textContent =\r\n                    voice.name + (voice.default ? ' (default)' : '');\r\n                option.setAttribute('data-voice-uri', voice.voiceURI);\r\n\r\n                return option;\r\n            })\r\n            .map((option) => {\r\n                return option.outerHTML;\r\n            })\r\n            .join('');\r\n    };\r\n\r\n    const handlerSpeak = () => {\r\n        let words = text.split(' ');\r\n        globalWords.current = words;\r\n        spokenTextArray.current = words;\r\n        drawTextInPanel(words);\r\n\r\n        let selectedOption =\r\n            voices.current.options[voices.current.selectedIndex];\r\n        let selectedVoice = speechSynthesis\r\n            .getVoices()\r\n            .filter(function (voice) {\r\n                return (\r\n                    voice.voiceURI ===\r\n                    selectedOption.getAttribute('data-voice-uri')\r\n                );\r\n            })\r\n            .pop();\r\n\r\n        utterance.text = text;\r\n        utterance.voice = selectedVoice;\r\n        utterance.lang = selectedVoice.lang;\r\n        utterance.rate = rate;\r\n        utterance.pitch = pitch;\r\n        utterance.volume = volume;\r\n\r\n        utterance.onboundary = function (e) {\r\n            let word = getWordAt(text, e.charIndex);\r\n            wordRef.current.innerHTML = word;\r\n\r\n            try {\r\n                let currentWord = document.getElementById(\r\n                    'word_span_' + wordIndexRef.current,\r\n                );\r\n                currentWord.style.color = 'blue';\r\n                currentWord.style.backgroundColor = '#e4e4e4';\r\n                currentWord.style.padding = '0 3px';\r\n                currentWord.style.display = 'inline-block';\r\n                currentWord.style.margin = '0 -3px';\r\n            } catch (e) {}\r\n\r\n            wordIndexRef.current++;\r\n        };\r\n\r\n        utterance.onend = function () {\r\n            handlerStop();\r\n        };\r\n\r\n        speechSynthesis.speak(utterance);\r\n        setIsPaused(false);\r\n        setIsSpeak(false);\r\n    };\r\n\r\n    const handlerStop = () => {\r\n        wordRef.current.innerHTML = '';\r\n        wordIndexRef.current = 0;\r\n        panelRef.current.innerHTML = '';\r\n        globalWords.current = [];\r\n        spokenTextArray.current = [];\r\n        panelRef.current.innerHTML = '';\r\n        speechSynthesis.cancel();\r\n        setIsPaused(true);\r\n        setIsSpeak(true);\r\n    };\r\n\r\n    const handlerPause = () => {\r\n        speechSynthesis.pause();\r\n        setIsPaused(true);\r\n    };\r\n\r\n    const handlerContinue = () => {\r\n        speechSynthesis.resume();\r\n        setIsPaused(false);\r\n    };\r\n\r\n    const handlerRate = (e) => {\r\n        setRate(e.target.value);\r\n        handlerStop();\r\n    };\r\n\r\n    const handlerPitch = (e) => {\r\n        setPitch(e.target.value);\r\n        handlerStop();\r\n    };\r\n\r\n    const handlerVolume = (e) => {\r\n        setVolume(e.target.value);\r\n        handlerStop();\r\n    };\r\n\r\n    const handlerText = (e) => {\r\n        setText(e.target.value);\r\n        if (text === '') {\r\n            setIsSpeak(true);\r\n        }\r\n        handlerStop();\r\n    };\r\n\r\n    const handlerClear = () => {\r\n        setText('');\r\n        handlerStop();\r\n    };\r\n\r\n    const getWordAt = (str, pos) => {\r\n        str = String(str);\r\n        pos = Number(pos) >>> 0;\r\n\r\n        var left = str.slice(0, pos + 1).search(/\\S+$/),\r\n            right = str.slice(pos).search(/\\s/);\r\n\r\n        if (right < 0) {\r\n            return str.slice(left);\r\n        }\r\n\r\n        return str.slice(left, right + pos);\r\n    };\r\n\r\n    const drawTextInPanel = (words_array) => {\r\n        for (var i = 0; i < words_array.length; i++) {\r\n            var html =\r\n                '<span id=\"word_span_' +\r\n                i +\r\n                '\">' +\r\n                words_array[i] +\r\n                '</span>&nbsp;';\r\n            panelRef.current.innerHTML += html;\r\n        }\r\n    };\r\n\r\n    const handlerToggleRecord = () => {\r\n        if(!isRecord){\r\n            setIsRecord(true); \r\n            recognition.current.onresult = (event) =>{                 \r\n                let output = text === '' ? text : text + ' ';\r\n\r\n                for(var i=0; i<event.results.length; i++){\r\n                    output = output + event.results[i][0].transcript ;\r\n                }\r\n                \r\n                setText(output);       \r\n            }\r\n            recognition.current.start();\r\n        } else {\r\n            setIsRecord(false); \r\n            recognition.current.stop();\r\n        }\r\n    }\r\n\r\n    const handlerCreateEmail = () => {\r\n        setIsRecord(false); \r\n        recognition.current.stop();\r\n\r\n        let n = text.indexOf('\\n');\r\n        if (n < 0 || n >= 80) {\r\n            n = 40 + text.substring(40).indexOf(' ');\r\n        }\r\n        let subject = encodeURI(text.substring(0, n));\r\n        let body = encodeURI(text.substring(n + 1));\r\n        window.location.href = 'mailto:?subject=' + subject + '&body=' + body;\r\n    }\r\n\r\n    const handleCopyLink = () => {\r\n        setIsRecord(false); \r\n        recognition.current.stop();\r\n\r\n        navigator.clipboard\r\n            .writeText(text)\r\n            .then(() => {\r\n                setIsCopied(true);\r\n                setTimeout(() => {\r\n                    setIsCopied(false);\r\n                }, 1000);\r\n            })\r\n            .catch((err) => {\r\n                console.log('Something went wrong', err);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {compatibility.current ? (\r\n                <Container className={classes.content}>\r\n                    <div\r\n                        className={isSpeak ? null : classes.curtainBlocked}\r\n                        onClick={handlerStop}\r\n                    ></div>\r\n                    <div className={classes.contentWrap}>\r\n                        <Jumbotron className={classes.jumbotron}>\r\n                            <Form action=\"\" method=\"get\">\r\n                                <FormText className={classes.info}>\r\n                                    Simple app for speech synthesis using\r\n                                    React.js and Web Speech API <br />\r\n                                    In the text field, write the text that you\r\n                                    want to play with your computer's voice                                    \r\n                                </FormText>\r\n\r\n                                <FormGroup className={classes.formGroup}>\r\n                                    <div\r\n                                        ref={panelRef}\r\n                                        className={\r\n                                            isSpeak ? null : classes.panelText\r\n                                        }\r\n                                    ></div>\r\n                                    <div\r\n                                        className={\r\n                                            isSpeak\r\n                                                ? null\r\n                                                : classes.textareaBlocked\r\n                                        }\r\n                                    >\r\n                                        <div\r\n                                            ref={wordRef}\r\n                                            className={\r\n                                                isSpeak\r\n                                                    ? null\r\n                                                    : classes.currentWord\r\n                                            }\r\n                                        ></div>\r\n                                    </div>\r\n\r\n                                    <Input\r\n                                        disabled={isSpeak ? false : true}\r\n                                        type=\"textarea\"\r\n                                        id=\"text\"\r\n                                        ref={textRef}\r\n                                        className={classes.inputText}\r\n                                        value={text}\r\n                                        onChange={(e) => handlerText(e)}\r\n                                        onClick={handlerStop}\r\n                                    ></Input>\r\n                                </FormGroup>\r\n                                <FormGroup className={classes.formGroup}>\r\n                                    <Label for=\"voice\">Voice:</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        id=\"voice\"\r\n                                        ref={voices}\r\n                                        onChange={handlerStop}\r\n                                    ></select>\r\n                                </FormGroup>\r\n                                <Row form className={classes.formGroup}>\r\n                                    <Col md={4}>\r\n                                        <FormGroup\r\n                                            className={classes.rangeInput}\r\n                                        >\r\n                                            <Label for=\"rate\">\r\n                                                Rate: <b>{rate}</b>\r\n                                            </Label>\r\n                                            <Input\r\n                                                type=\"range\"\r\n                                                id=\"rate\"\r\n                                                min=\"0.1\"\r\n                                                max=\"2\"\r\n                                                value={rate}\r\n                                                step=\"0.1\"\r\n                                                onChange={(e) => handlerRate(e)}\r\n                                            />\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                    <Col md={4}>\r\n                                        <FormGroup\r\n                                            className={classes.rangeInput}\r\n                                        >\r\n                                            <Label for=\"pitch\">\r\n                                                Pitch: <b>{pitch}</b>\r\n                                            </Label>\r\n                                            <Input\r\n                                                type=\"range\"\r\n                                                id=\"pitch\"\r\n                                                min=\"0.1\"\r\n                                                max=\"2\"\r\n                                                value={pitch}\r\n                                                step=\"0.1\"\r\n                                                onChange={(e) =>\r\n                                                    handlerPitch(e)\r\n                                                }\r\n                                            />\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                    <Col md={4}>\r\n                                        <FormGroup\r\n                                            className={classes.rangeInput}\r\n                                        >\r\n                                            <Label for=\"pitch\">\r\n                                                Volume: <b>{volume}</b>\r\n                                            </Label>\r\n                                            <Input\r\n                                                type=\"range\"\r\n                                                id=\"volume\"\r\n                                                min=\"0.1\"\r\n                                                max=\"2\"\r\n                                                value={volume}\r\n                                                step=\"0.1\"\r\n                                                onChange={(e) =>\r\n                                                    handlerVolume(e)\r\n                                                }\r\n                                            />\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                </Row>\r\n    \r\n                                <FormGroup className={classes.buttonGroup}>\r\n                                    {isSpeak ? (\r\n                                        <Button\r\n                                            disabled={!text ? true : false}\r\n                                            type=\"button\"\r\n                                            id=\"button-speak\"\r\n                                            color=\"success\"\r\n                                            className={classes.button}\r\n                                            onClick={handlerSpeak}\r\n                                        >\r\n                                            <i className=\"fas fa-play\"></i>{' '}\r\n                                            Speak\r\n                                        </Button>\r\n                                    ) : (\r\n                                        <Button\r\n                                            type=\"button\"\r\n                                            id=\"button-continue\"\r\n                                            color=\"info\"\r\n                                            className={classes.button}\r\n                                            onClick={handlerContinue}\r\n                                        >\r\n                                            <i className=\"fas fa-play\"></i>{' '}\r\n                                            Speak\r\n                                        </Button>\r\n                                    )}\r\n                                    <Button\r\n                                        disabled={!isPaused ? false : true}\r\n                                        type=\"button\"\r\n                                        id=\"button-pause\"\r\n                                        color=\"info\"\r\n                                        className={classes.button}\r\n                                        onClick={handlerPause}\r\n                                    >\r\n                                        <i className=\"fas fa-pause\"></i> Pause\r\n                                    </Button>\r\n\r\n                                    <Button\r\n                                        disabled={!text ? true : false}\r\n                                        type=\"button\"\r\n                                        id=\"button-stop\"\r\n                                        color=\"danger\"\r\n                                        className={classes.button}\r\n                                        onClick={handlerStop}\r\n                                    >\r\n                                        <i className=\"fas fa-stop\"></i> Stop\r\n                                    </Button>\r\n\r\n                                    <Button\r\n                                        disabled={!text ? true : false}\r\n                                        type=\"button\"\r\n                                        id=\"button-clear\"\r\n                                        color=\"danger\"\r\n                                        className={classes.button}\r\n                                        onClick={handlerClear}\r\n                                    >\r\n                                        <i className=\"fas fa-trash-alt\"></i>{' '}\r\n                                        Clear\r\n                                    </Button>\r\n                                    </FormGroup>\r\n\r\n                                    <FormGroup className={classes.buttonGroup}>\r\n                                    <Button\r\n                                        type=\"button\"\r\n                                        id=\"button-record\"\r\n                                        color={isRecord ? 'danger': 'success'}\r\n                                        className={[classes.button, isRecord ? classes.blink: null].join(' ')}\r\n                                        onClick={handlerToggleRecord}\r\n                                    >\r\n                                        <i className=\"fas fa-microphone-alt\"></i>{' '}\r\n                                        Record\r\n                                    </Button>\r\n\r\n                                    <Button\r\n                                        disabled={!text ? true : false}\r\n                                        type=\"button\"\r\n                                        id=\"button-record\"\r\n                                        color=\"info\"\r\n                                        className={classes.button}\r\n                                        onClick={handlerCreateEmail}\r\n                                    >\r\n                                        <i className=\"fas fa-envelope\"></i>{' '}\r\n                                        Email\r\n                                    </Button>\r\n\r\n                                    <Button\r\n                                        disabled={!text ? true : false}\r\n                                        type=\"button\"\r\n                                        id=\"button-record\"\r\n                                        color={isCopied ? 'success' : 'info'}\r\n                                        className={classes.button}\r\n                                        onClick={handleCopyLink}\r\n                                        style={{display: 'inline-block', width: '100px'}}\r\n                                    >\r\n                                        <i className=\"fas fa-copy\"></i>{' '}\r\n                                        {isCopied ? 'Copied' : 'Copy'}\r\n                                    </Button>\r\n                                    </FormGroup> \r\n                            </Form>\r\n                        </Jumbotron>                        \r\n                    </div>\r\n                </Container>\r\n            ) : (\r\n                <Container>\r\n                    <Row>\r\n                        <p className={classes.unsupported}>\r\n                            Speech Synthesis API Not Supported!\r\n                        </p>\r\n                    </Row>\r\n                </Container>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TextReader;\r\n","import React from 'react';\r\n\r\nimport classes from './Header.module.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={classes.header}>\r\n            <div className={classes.headerWrap}>\r\n                <h1>READ.OK | Web Speech API</h1>\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nimport classes from './Footer.module.css';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer className={classes.footer}>\r\n            <p>\r\n                © 2020 | READ.OK | Created by Dmitriy Zatulovskiy |{' '}\r\n                <a\r\n                    href=\"https://github.com/GrafSoul/react-speech-synthesis\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                >\r\n                    GitHub\r\n                </a>\r\n            </p>\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\n\nimport TextReader from './TextReader/TextReader';\nimport Header from './components/Header/Header';\nimport Footer from './components/Footer/Footer';\n\nconst App = () => {\n    return (\n        <>\n            <Header />\n            <TextReader />\n            <Footer />\n        </>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"TextReader_content__13bKa\",\"contentWrap\":\"TextReader_contentWrap__3Oe6O\",\"curtainBlocked\":\"TextReader_curtainBlocked__-6CW3\",\"jumbotron\":\"TextReader_jumbotron__1Qtbg\",\"info\":\"TextReader_info__M8cP8\",\"formGroup\":\"TextReader_formGroup__W58Pc\",\"inputText\":\"TextReader_inputText__-9i7C\",\"rangeInput\":\"TextReader_rangeInput__10w88\",\"button\":\"TextReader_button__1m_0l\",\"buttonGroup\":\"TextReader_buttonGroup__2e7cw\",\"textareaBlocked\":\"TextReader_textareaBlocked__nJXWW\",\"panelText\":\"TextReader_panelText__2PdQ4\",\"currentWord\":\"TextReader_currentWord__BBlWQ\",\"blink\":\"TextReader_blink__2rAQG\",\"blinker\":\"TextReader_blinker__1GXaS\"};"],"sourceRoot":""}